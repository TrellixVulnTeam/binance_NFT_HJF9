# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD + python 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - "**.java"
      - "**.python"

jobs:
  build:

    runs-on: ubuntu-18.04
    
    env: 
      working-directory: ./server/NFTJAVA
      pythonworking-directory: ./pycode

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ${{env.working-directory}}
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{env.working-directory}}
      
      # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: mkdir deploy
      working-directory: ${{env.working-directory}}
      
    # Jar 파일 Copy
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/
      working-directory: ${{env.working-directory}}

    # appspec.yml 파일 복사
    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy
      working-directory: ${{env.working-directory}}
      
    # deploy.sh 파일 복사
    - name: Copy deploy.sh
      run: cp deploy.sh ./deploy
      working-directory: ${{env.working-directory}}      
      
    # main python 파일 넘기기
    - name: Copy python file
      run: cp ../../pycode/main.py ./deploy
      working-directory: ${{env.working-directory}}
      
    # python crawl key 작성
    - name: make py file
      run: touch apikey.py 
      working-directory: ${{env.working-directory}}


    # py 작성
    - name: edit crawlkey
      run: 'echo "$API_KEY" > key'
      shell: bash
      env:
        API_KEY: ${{DEAL_CRAW_API_KEY}}      
      working-directory: ${{env.working-directory}}

    # 확인
    - name: cat crawlkey
      run: cat apikey.py
      working-directory: ${{env.working-directory}}
      
    # crwalkey파일 넘기기
    - name: Copy apikey.sh
      run: cp apikey.py ./deploy
      working-directory: ${{env.working-directory}}          
      
    # crawl py 넘기기
    
    - name: Copy crawl file 
      run: cp ../../pycode/crawl.py ./deploy
      working-directory: ${{env.working-directory}}

    # pyrun.sh 파일 복사
    - name: Copy pyrun.sh
      run: cp ../../pycode/pyrun.sh ./deploy
      working-directory: ${{env.working-directory}}
      

    # 압축파일 형태로 전달
    - name: Make zip file
      run: zip -r -qq -j ./coinserver.zip ./deploy
      working-directory: ${{env.working-directory}}
      
    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
      env:
        AWS_S3_BUCKET: ${{secrets.AWS_PRODUCTION_BUCKET_NAME}}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_MANAGER_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_MANAGER_SECRET_ACCESS_KEY }}
        AWS_REGION: ap-northeast-2
      run: |
        aws s3 cp --region ap-northeast-2 --acl private ./coinserver.zip s3://$AWS_S3_BUCKET
      working-directory: ${{env.working-directory}}
      
      
    # 배포
    - name: CodeDeploy
      env:
        AWS_S3_BUCKET: ${{secrets.AWS_PRODUCTION_BUCKET_NAME}}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_MANAGER_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_MANAGER_SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
          --application-name coinapp \
          --deployment-group-name coin-deploy-group \
          --s3-location bucket=kmscoinbucket,key=coinserver.zip,bundleType=zip \
          --region ap-northeast-2
      working-directory: ${{env.working-directory}}
 
